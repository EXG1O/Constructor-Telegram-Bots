# Initially generated by Django 5.0.6 on 2025-07-14 20:28

from django.apps.registry import Apps
from django.contrib.contenttypes.models import ContentType
from django.db import migrations, models
from django.db.backends.base.schema import BaseDatabaseSchemaEditor
import django.db.models.deletion

import telegram_bots.models.base

from ..enums import ConnectionHandlePosition

from typing import TYPE_CHECKING, Any

if TYPE_CHECKING:
    from ..models import (
        Command,
        Connection,
        DatabaseCreateOperation,
        DatabaseOperation,
        TelegramBot,
    )

    class CommandDatabaseRecord(models.Model):
        command: Command
        data: dict[str, Any] | list[Any]
else:
    TelegramBot = Any
    Command = Any
    CommandDatabaseRecord = Any
    Connection = Any
    DatabaseOperation = Any
    DatabaseCreateOperation = Any


def migrate_command_database_records(
    apps: Apps, schema_editor: BaseDatabaseSchemaEditor
) -> None:
    command_model: type[Command] = apps.get_model('telegram_bots', 'Command')
    command_database_record_model: type[CommandDatabaseRecord] = apps.get_model(
        'telegram_bots', 'CommandDatabaseRecord'
    )
    connection_model: type[Connection] = apps.get_model('telegram_bots', 'Connection')
    database_operation_model: type[DatabaseOperation] = apps.get_model(
        'telegram_bots', 'DatabaseOperation'
    )
    database_create_operation_model: type[DatabaseCreateOperation] = apps.get_model(
        'telegram_bots', 'DatabaseCreateOperation'
    )
    content_type_model: type[ContentType] = apps.get_model(
        'contenttypes', 'ContentType'
    )

    create_connections: list[Connection] = []

    command_content_type: ContentType = content_type_model.objects.get_for_model(
        command_model
    )
    database_operation_content_type: ContentType = (
        content_type_model.objects.get_for_model(database_operation_model)
    )

    for command_database_record in command_database_record_model.objects.iterator():  # type: ignore [attr-defined]
        command: Command = command_database_record.command
        telegram_bot: TelegramBot = command.telegram_bot

        database_operation: DatabaseOperation = database_operation_model.objects.create(
            telegram_bot=telegram_bot,
            name='Database Operation',
            x=command.x - 50,
            y=command.y,
        )
        database_create_operation_model.objects.create(
            operation=database_operation,
            data=command_database_record.data,
        )

        create_connections.extend(
            connection_model(
                telegram_bot=telegram_bot,
                source_content_type=command_target_connection.source_content_type,
                source_object_id=command_target_connection.source_object_id,
                source_handle_position=command_target_connection.source_handle_position,
                target_content_type=database_operation_content_type,
                target_object_id=database_operation.id,
                target_handle_position=ConnectionHandlePosition.LEFT,
            )
            for command_target_connection in command.target_connections
        )
        command.target_connections.delete()
        create_connections.append(
            connection_model(
                telegram_bot=telegram_bot,
                source_content_type=database_operation_content_type,
                source_object_id=database_operation.id,
                source_handle_position=ConnectionHandlePosition.RIGHT,
                target_content_type=command_content_type,
                target_object_id=command.id,
                target_handle_position=ConnectionHandlePosition.LEFT,
            )
        )

    connection_model.objects.bulk_create(create_connections)


class Migration(migrations.Migration):
    dependencies = [('telegram_bots', '0005_apirequest_and_more')]
    operations = [
        migrations.CreateModel(
            name='DatabaseOperation',
            fields=[
                (
                    'id',
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name='ID',
                    ),
                ),
                ('name', models.CharField(max_length=128, verbose_name='Название')),
                (
                    'x',
                    models.FloatField(
                        default=telegram_bots.models.base.generate_random_coordinate,
                        verbose_name='Координата X',
                    ),
                ),
                (
                    'y',
                    models.FloatField(
                        default=telegram_bots.models.base.generate_random_coordinate,
                        verbose_name='Координата Y',
                    ),
                ),
                (
                    'telegram_bot',
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name='database_operations',
                        to='telegram_bots.telegrambot',
                        verbose_name='Telegram бот',
                    ),
                ),
            ],
            options={
                'verbose_name': 'Операция базы данных',
                'verbose_name_plural': 'Операции баз данных',
                'db_table': 'telegram_bot_database_operation',
            },
        ),
        migrations.CreateModel(
            name='DatabaseCreateOperation',
            fields=[
                (
                    'id',
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name='ID',
                    ),
                ),
                ('data', models.JSONField(verbose_name='Данные')),
                (
                    'operation',
                    models.OneToOneField(
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name='create_operation',
                        to='telegram_bots.databaseoperation',
                        verbose_name='Операция',
                    ),
                ),
            ],
            options={
                'verbose_name': 'Операция создания записи',
                'verbose_name_plural': 'Операции создания записей',
                'db_table': 'telegram_bot_database_create_operation',
            },
        ),
        migrations.CreateModel(
            name='DatabaseUpdateOperation',
            fields=[
                (
                    'id',
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name='ID',
                    ),
                ),
                (
                    'overwrite',
                    models.BooleanField(default=True, verbose_name='Перезаписать'),
                ),
                (
                    'lookup_field_name',
                    models.CharField(
                        max_length=255, verbose_name='Название поля для поиска'
                    ),
                ),
                (
                    'lookup_field_value',
                    models.CharField(
                        max_length=255, verbose_name='Значение поля для поиска'
                    ),
                ),
                (
                    'create_if_not_found',
                    models.BooleanField(
                        default=True, verbose_name='Создать, если не найдена'
                    ),
                ),
                ('new_data', models.JSONField(verbose_name='Новые данные')),
                (
                    'operation',
                    models.OneToOneField(
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name='update_operation',
                        to='telegram_bots.databaseoperation',
                        verbose_name='Операция',
                    ),
                ),
            ],
            options={
                'verbose_name': 'Операция обновления записи',
                'verbose_name_plural': 'Операции обновления записей',
                'db_table': 'telegram_bot_database_update_operation',
            },
        ),
        migrations.RunPython(
            migrate_command_database_records, reverse_code=migrations.RunPython.noop
        ),
        migrations.DeleteModel(name='CommandDatabaseRecord'),
    ]
