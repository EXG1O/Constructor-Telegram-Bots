# Initially generated by Django 5.0.6 on 2025-04-29 19:04

from django.apps.registry import Apps
from django.contrib.contenttypes.models import ContentType
from django.db import migrations, models
from django.db.backends.base.schema import BaseDatabaseSchemaEditor
import django.db.models.deletion

from ..enums import ConnectionHandlePosition
from ..models.base import generate_random_coordinate

from typing import TYPE_CHECKING, Any, Final
import re

if TYPE_CHECKING:
    from ..models import (
        Command,
        Connection,
        TelegramBot,
        Trigger,
        TriggerCommand,
        TriggerMessage,
    )

    class CommandTrigger(models.Model):
        command: Command
        text: str
        description: str | None
else:
    TelegramBot = Any
    Command = Any
    CommandTrigger = Any
    Connection = Any
    Trigger = Any
    TriggerCommand = Any
    TriggerMessage = Any


COMMAND_PATTERN: Final[re.Pattern[str]] = re.compile(r'^/[\w]{1,32}$', flags=re.ASCII)


def migrate_command_triggers(
    apps: Apps, schema_editor: BaseDatabaseSchemaEditor
) -> None:
    command_model: type[Command] = apps.get_model('telegram_bots', 'Command')
    command_trigger_model: type[CommandTrigger] = apps.get_model(
        'telegram_bots', 'CommandTrigger'
    )
    connection_model: type[Connection] = apps.get_model('telegram_bots', 'Connection')
    trigger_model: type[Trigger] = apps.get_model('telegram_bots', 'Trigger')
    trigger_command_model: type[TriggerCommand] = apps.get_model(
        'telegram_bots', 'TriggerCommand'
    )
    trigger_message_model: type[TriggerMessage] = apps.get_model(
        'telegram_bots', 'TriggerMessage'
    )
    content_type_model: type[ContentType] = apps.get_model(
        'contenttypes', 'ContentType'
    )

    create_trigger_commands: list[TriggerCommand] = []
    create_trigger_messages: list[TriggerMessage] = []
    create_connections: list[Connection] = []

    connection_source_content_type: ContentType = (
        content_type_model.objects.get_for_model(trigger_model)
    )
    connection_target_content_type: ContentType = (
        content_type_model.objects.get_for_model(command_model)
    )

    for command_trigger in command_trigger_model.objects.iterator():  # type: ignore [attr-defined]
        command: Command = command_trigger.command
        telegram_bot: TelegramBot = command.telegram_bot

        trigger: Trigger = trigger_model.objects.create(
            telegram_bot=telegram_bot, name='Trigger', x=command.x - 350, y=command.y
        )

        if COMMAND_PATTERN.fullmatch(command_trigger.text):
            create_trigger_commands.append(
                trigger_command_model(
                    trigger=trigger,
                    command=command_trigger.text.removeprefix('/'),
                    payload=None,
                    description=command_trigger.description,
                )
            )
        else:
            create_trigger_messages.append(
                trigger_message_model(trigger=trigger, text=command_trigger.text)
            )

        create_connections.append(
            connection_model(
                telegram_bot=telegram_bot,
                source_content_type=connection_source_content_type,
                source_object_id=trigger.id,
                source_handle_position=ConnectionHandlePosition.RIGHT,
                target_content_type=connection_target_content_type,
                target_object_id=command.id,
                target_handle_position=ConnectionHandlePosition.LEFT,
            )
        )

    trigger_command_model.objects.bulk_create(create_trigger_commands)
    trigger_message_model.objects.bulk_create(create_trigger_messages)
    connection_model.objects.bulk_create(create_connections)


class Migration(migrations.Migration):
    dependencies = [('telegram_bots', '0003_rename_file_command_and_more')]
    operations = [
        migrations.CreateModel(
            name='Trigger',
            fields=[
                (
                    'id',
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name='ID',
                    ),
                ),
                ('name', models.CharField(max_length=128, verbose_name='Название')),
                (
                    'x',
                    models.FloatField(
                        default=generate_random_coordinate, verbose_name='Координата X'
                    ),
                ),
                (
                    'y',
                    models.FloatField(
                        default=generate_random_coordinate, verbose_name='Координата Y'
                    ),
                ),
                (
                    'telegram_bot',
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name='triggers',
                        to='telegram_bots.telegrambot',
                        verbose_name='Telegram бот',
                    ),
                ),
            ],
            options={
                'verbose_name': 'Триггер',
                'verbose_name_plural': 'Триггеры',
                'db_table': 'telegram_bot_trigger',
            },
        ),
        migrations.CreateModel(
            name='TriggerCommand',
            fields=[
                (
                    'id',
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name='ID',
                    ),
                ),
                ('command', models.CharField(max_length=32, verbose_name='Команда')),
                (
                    'payload',
                    models.CharField(
                        blank=True,
                        max_length=64,
                        null=True,
                        verbose_name='Полезная нагрузка',
                    ),
                ),
                (
                    'description',
                    models.CharField(
                        blank=True, max_length=255, null=True, verbose_name='Описание'
                    ),
                ),
                (
                    'trigger',
                    models.OneToOneField(
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name='command',
                        to='telegram_bots.trigger',
                        verbose_name='Триггер',
                    ),
                ),
            ],
            options={
                'verbose_name': 'Команда триггер',
                'verbose_name_plural': 'Команды триггеры',
                'db_table': 'telegram_bot_trigger_command',
            },
        ),
        migrations.CreateModel(
            name='TriggerMessage',
            fields=[
                (
                    'id',
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name='ID',
                    ),
                ),
                ('text', models.TextField(max_length=4096, verbose_name='Текст')),
                (
                    'trigger',
                    models.OneToOneField(
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name='message',
                        to='telegram_bots.trigger',
                        verbose_name='Триггер',
                    ),
                ),
            ],
            options={
                'verbose_name': 'Сообщение триггер',
                'verbose_name_plural': 'Сообщения триггеры',
                'db_table': 'telegram_bot_trigger_message',
            },
        ),
        migrations.RunPython(
            migrate_command_triggers, reverse_code=migrations.RunPython.noop
        ),
        migrations.DeleteModel(name='CommandTrigger'),
    ]
