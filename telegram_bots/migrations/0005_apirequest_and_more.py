# Initially generated by Django 5.0.6 on 2025-07-12 18:29

from django.apps.registry import Apps
from django.contrib.contenttypes.models import ContentType
from django.db import migrations, models
from django.db.backends.base.schema import BaseDatabaseSchemaEditor
import django.db.models.deletion

import constructor_telegram_bots.fields
import telegram_bots.models.base

from ..enums import APIRequestMethod, ConnectionHandlePosition

from typing import TYPE_CHECKING, Any

if TYPE_CHECKING:
    from ..models import APIRequest, BackgroundTask, Command, Connection, TelegramBot

    class AbstractAPIRequest(models.Model):
        url: str
        method: APIRequestMethod
        headers: dict[str, Any] | None
        body: dict[str, Any] | None

    class CommandAPIRequest(AbstractAPIRequest):
        command: Command

    class BackgroundTaskAPIRequest(AbstractAPIRequest):
        background_task: BackgroundTask
else:
    TelegramBot = Any
    Command = Any
    CommandAPIRequest = Any
    Connection = Any
    BackgroundTask = Any
    BackgroundTaskAPIRequest = Any
    APIRequest = Any


def migrate_command_api_requests(
    apps: Apps, schema_editor: BaseDatabaseSchemaEditor
) -> None:
    command_model: type[Command] = apps.get_model('telegram_bots', 'Command')
    command_api_request_model: type[CommandAPIRequest] = apps.get_model(
        'telegram_bots', 'CommandAPIRequest'
    )
    connection_model: type[Connection] = apps.get_model('telegram_bots', 'Connection')
    api_request_model: type[APIRequest] = apps.get_model('telegram_bots', 'APIRequest')
    content_type_model: type[ContentType] = apps.get_model(
        'contenttypes', 'ContentType'
    )

    create_connections: list[Connection] = []

    command_content_type: ContentType = content_type_model.objects.get_for_model(
        command_model
    )
    api_request_content_type: ContentType = content_type_model.objects.get_for_model(
        api_request_model
    )

    for command_api_request in command_api_request_model.objects.iterator():  # type: ignore [attr-defined]
        command: Command = command_api_request.command
        telegram_bot: TelegramBot = command.telegram_bot

        api_request: APIRequest = api_request_model.objects.create(
            telegram_bot=telegram_bot,
            name='API Request',
            url=command_api_request.url,
            method=command_api_request.method,
            headers=command_api_request.headers,
            body=command_api_request.body,
            x=command.x - 50,
            y=command.y,
        )

        create_connections.extend(
            connection_model(
                telegram_bot=telegram_bot,
                source_content_type=command_target_connection.source_content_type,
                source_object_id=command_target_connection.source_object_id,
                source_handle_position=command_target_connection.source_handle_position,
                target_content_type=api_request_content_type,
                target_object_id=api_request.id,
                target_handle_position=ConnectionHandlePosition.LEFT,
            )
            for command_target_connection in command.target_connections
        )
        command.target_connections.delete()
        create_connections.append(
            connection_model(
                telegram_bot=telegram_bot,
                source_content_type=api_request_content_type,
                source_object_id=api_request.id,
                source_handle_position=ConnectionHandlePosition.RIGHT,
                target_content_type=command_content_type,
                target_object_id=command.id,
                target_handle_position=ConnectionHandlePosition.LEFT,
            )
        )

    connection_model.objects.bulk_create(create_connections)


def migrate_background_task_api_requests(
    apps: Apps, schema_editor: BaseDatabaseSchemaEditor
) -> None:
    background_task_model: type[BackgroundTask] = apps.get_model(
        'telegram_bots', 'BackgroundTask'
    )
    background_task_api_request_model: type[BackgroundTaskAPIRequest] = apps.get_model(
        'telegram_bots', 'BackgroundTaskAPIRequest'
    )
    connection_model: type[Connection] = apps.get_model('telegram_bots', 'Connection')
    api_request_model: type[APIRequest] = apps.get_model('telegram_bots', 'APIRequest')
    content_type_model: type[ContentType] = apps.get_model(
        'contenttypes', 'ContentType'
    )

    create_connections: list[Connection] = []

    background_task_content_type: ContentType = (
        content_type_model.objects.get_for_model(background_task_model)
    )
    api_request_content_type: ContentType = content_type_model.objects.get_for_model(
        api_request_model
    )

    for (
        background_task_api_request
    ) in background_task_api_request_model.objects.iterator():  # type: ignore [attr-defined]
        background_task: BackgroundTask = background_task_api_request.background_task
        telegram_bot: TelegramBot = background_task.telegram_bot

        api_request: APIRequest = api_request_model.objects.create(
            telegram_bot=telegram_bot,
            name='API Request',
            url=background_task_api_request.url,
            method=background_task_api_request.method,
            headers=background_task_api_request.headers,
            body=background_task_api_request.body,
            x=background_task.x + 350,
            y=background_task.y,
        )

        create_connections.append(
            connection_model(
                telegram_bot=telegram_bot,
                source_content_type=background_task_content_type,
                source_object_id=background_task.id,
                source_handle_position=ConnectionHandlePosition.RIGHT,
                target_content_type=api_request_content_type,
                target_object_id=api_request.id,
                target_handle_position=ConnectionHandlePosition.LEFT,
            )
        )
        create_connections.extend(
            connection_model(
                telegram_bot=telegram_bot,
                source_content_type=api_request_content_type,
                source_object_id=api_request.id,
                source_handle_position=ConnectionHandlePosition.RIGHT,
                target_content_type=background_task_source_connection.target_content_type,
                target_object_id=background_task_source_connection.target_object_id,
                target_handle_position=background_task_source_connection.target_handle_position,
            )
            for background_task_source_connection in background_task.source_connections
        )
        background_task.source_connections.delete()

    connection_model.objects.bulk_create(create_connections)


class Migration(migrations.Migration):
    dependencies = [
        ('telegram_bots', '0004_trigger_triggercommand_triggermessage_and_more')
    ]
    operations = [
        migrations.CreateModel(
            name='APIRequest',
            fields=[
                (
                    'id',
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name='ID',
                    ),
                ),
                ('name', models.CharField(max_length=128, verbose_name='Название')),
                (
                    'x',
                    models.FloatField(
                        default=telegram_bots.models.base.generate_random_coordinate,
                        verbose_name='Координата X',
                    ),
                ),
                (
                    'y',
                    models.FloatField(
                        default=telegram_bots.models.base.generate_random_coordinate,
                        verbose_name='Координата Y',
                    ),
                ),
                (
                    'url',
                    constructor_telegram_bots.fields.PublicURLField(
                        verbose_name='URL-адрес'
                    ),
                ),
                (
                    'method',
                    models.CharField(
                        choices=[
                            ('get', 'GET'),
                            ('post', 'POST'),
                            ('put', 'PUT'),
                            ('patch', 'PATCH'),
                            ('delete', 'DELETE'),
                        ],
                        default='get',
                        max_length=6,
                        verbose_name='Метод',
                    ),
                ),
                (
                    'headers',
                    models.JSONField(blank=True, null=True, verbose_name='Заголовки'),
                ),
                (
                    'body',
                    models.JSONField(blank=True, null=True, verbose_name='Данные'),
                ),
                (
                    'telegram_bot',
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name='api_requests',
                        to='telegram_bots.telegrambot',
                        verbose_name='Telegram бот',
                    ),
                ),
            ],
            options={
                'verbose_name': 'API-запрос',
                'verbose_name_plural': 'API-запрос',
                'db_table': 'telegram_bot_api_request',
            },
        ),
        migrations.RunPython(
            migrate_command_api_requests, reverse_code=migrations.RunPython.noop
        ),
        migrations.DeleteModel(
            name='CommandAPIRequest',
        ),
        migrations.RunPython(
            migrate_background_task_api_requests, reverse_code=migrations.RunPython.noop
        ),
        migrations.DeleteModel(
            name='BackgroundTaskAPIRequest',
        ),
    ]
